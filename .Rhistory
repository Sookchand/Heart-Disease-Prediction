plot(density(heart[, 8]), main = names(heart)[8], xlab = names(heart)[8])
plot(density(heart[, 9]), main = names(heart)[9], xlab = names(heart)[9])
plot(density(heart[, 10]), main = names(heart)[10], xlab = names(heart)[10])
plot(density(heart[, 11]), main = names(heart)[11], xlab = names(heart)[11])
plot(density(heart[, 12]), main = names(heart)[12], xlab = names(heart)[12])
par(opar)
# generate a boxplot graph including horizontal background dashed lines
#   note: this can be done by
#     1. plotting an empty graph, i.e. with white boxes
#     2. adding the background dashed lines
#     3. plotting the coloured boxplot with the option add = T
opar <- par(no.readonly = TRUE)
boxplot(
swiss,
border = 'white',
yaxt = 'n'
)
abline(h = seq(0,100,10), lty = 'dashed', lwd = 2, col = 'darkgrey')
boxplot(
swiss,
border = 'blue',
yaxt = 'n',
add = T
)
axis(2, seq(0,100,10))
par(opar)
hist(heart$target)
tabyl(heart, sex, target)
#  Identifying which values == 0 in this column
#  heart$cholesterol == 0 will give all values = 0 as True and the rest as false.
#  Passing the above result to the column and replacing with NA
heart$cholesterol[heart$cholesterol == 0] <- NA
# Removing all instance of NA
heart_clean <- na.omit(heart)
# Check the size
dim(heart)
dim(heart_clean)
boxplot(target ~ age, data = heart)
boxplot(target ~ sex, data = heart)
boxplot(target ~ chest.pain.type, data = heart)
boxplot(target ~ resting.bp.s, data = heart)
boxplot(target ~ cholesterol, data = heart)
boxplot(target ~ fasting.blood.sugar, data = heart)
boxplot(target ~ resting.ecg, data = heart)
boxplot(target ~ max.heart.rate, data = heart)
boxplot(target ~ exercise.angina, data = heart)
boxplot(target ~ oldpeak, data = heart)
boxplot(target ~ ST.slope, data = heart)
# outliers was detected above using boxplot
#   note: the boxplot command returns a summary statistics object
#     this object can be assigned to a variable and inspected
heart_sex_boxplot <-boxplot(target ~ sex, data = heart)
heart_cpt_boxplot <-boxplot(target ~ chest.pain.type, data = heart)
heart_rbps_boxplot <-boxplot(target ~ resting.bp.s, data = heart)
heart_chol_boxplot <-boxplot(target ~ cholesterol, data = heart)
heart_fbs_boxplot <-boxplot(target ~ fasting.blood.sugar, data = heart)
heart_mhr_boxplot <-boxplot(target ~ max.heart.rate, data = heart)
heart_STs_boxplot <-boxplot(target ~ ST.slope, data = heart)
# inspect the boxplot statistics
#   note: the returened value is a list object
heart_sex_boxplot
heart_cpt_boxplot
heart_rbps_boxplot
heart_chol_boxplot
heart_fbs_boxplot
heart_mhr_boxplot
heart_STs_boxplot
# outlier values can be extracted from this object
#   they are stored in the element 'out' of the list
heart_sex_boxplot$out
heart_cpt_boxplot$out
heart_rbps_boxplot$out
heart_chol_boxplot$out
heart_fbs_boxplot$out
heart_mhr_boxplot$out
heart_STs_boxplot$out
# get the minimum value that is an outlier
min(heart_sex_boxplot$out)
min(heart_cpt_boxplot$out)
min(heart_rbps_boxplot$out)
min(heart_chol_boxplot$out)
min(heart_fbs_boxplot$out)
min(heart_mhr_boxplot$out)
min(heart_STs_boxplot$out)
# outliers rows can be extracted by conditional selection
heart_clean[heart_clean$sex >= min(heart_sex_boxplot$out), ]
heart_clean[heart_clean$chest.pain.type >= min(heart_cpt_boxplot$out), ]
heart_clean[heart_clean$resting.bp.s >= min(heart_rbps_boxplot$out), ]
heart_clean[heart_clean$cholesterol >= min(heart_chol_boxplot$out), ]
heart_clean[heart_clean$fasting.blood.sugar >= min(heart_fbs_boxplot$out), ]
heart_clean[heart_clean$max.heart.rate >= min(heart_mhr_boxplot$out), ]
heart_clean[heart_clean$ST.slope >= min(heart_STs_boxplot$out), ]
dim(heart)
dim(heart_clean)
colnames(heart_clean)
colnames(heart_clean)[colnames(heart_clean) ==  "chest.pain.type" ] <- "chest_pain_type"
colnames(heart_clean)[colnames(heart_clean) == "resting.bp.s" ] <- "resting_bp_s"
colnames(heart_clean)[colnames(heart_clean) ==  "fasting.blood.sugar" ] <- "fasting_blood_sugar"
colnames(heart_clean)[colnames(heart_clean) ==  "resting.ecg" ] <- "resting_ecg"
colnames(heart_clean)[colnames(heart_clean) ==  "max.heart.rate" ] <- "max_heart_rate"
colnames(heart_clean)[colnames(heart_clean) ==  "exercise.angina" ] <- "exercise_angina"
colnames(heart_clean)[colnames(heart_clean) ==  "ST.slope" ] <- "ST_slope"
colnames(heart_clean)
# perform PCA on the swiss dataset
#   note: variables are centered and scaled before analysis
pc_heart <- prcomp(heart_clean, center = T, scale. = T)
# inspect the attributes of the PCA object returned by prcomp
attributes(pc_heart)
# see value section of the help for the prcomp for more details
help(prcomp)
# calculate the proportion of exaplained variance (PEV) from the std values
pc_heart_var <- pc_heart$sdev^2
pc_heart_var
pc_heart_PEV <- pc_heart_var / sum(pc_heart_var)
pc_heart_PEV
# plot the variance per PC
#   note: this can be done using the plot function on the prcomp object
plot(pc_heart)
# plot the cumulative value of PEV for increasing number of additional PCs
#   note: add an 80% threshold line to inform the feature extraction
#     according to the plot the first 3 PCs should be selected
opar <- par(no.readonly = TRUE)
plot(
cumsum(pc_heart_PEV),
ylim = c(0,1),
xlab = 'PC',
ylab = 'cumulative PEV',
pch = 20,
col = 'orange'
)
abline(h = 0.8, col = 'red', lty = 'dashed')
par(opar)
# get and inspect the loadings for each PC
#   note: loadings are reported as a rotation matrix (see lecture)
pc_heart_loadings <- pc_heart$rotation
pc_heart_loadings
# plot the loadings for the first three PCs as a barplot
#   note: two vectors for colours and labels are created for convenience
#     for details on the other parameters see the help for barplot and legend
opar <- par(no.readonly = TRUE)
colvector = c('red', 'orange', 'yellow', 'green', 'cyan', 'blue')
labvector = c('PC1', 'PC2', 'PC3')
barplot(
pc_heart_loadings[,c(1:3)],
beside = T,
yaxt = 'n',
names.arg = labvector,
col = colvector,
ylim = c(-1,1),
border = 'white',
ylab = 'loadings'
)
axis(2, seq(-1,1,0.1))
legend(
'bottomright',
bty = 'n',
col = colvector,
pch = 15,
row.names(pc_heart_loadings)
)
par(opar)
# generate a biplot for each pair of important PCs (and show them on the same page)
#   note: the option choices is used to select the PCs - default is 1:2
opar <- par(no.readonly = TRUE)
par(mfrow = c(2,2))
biplot(
pc_heart,
scale = TRUE,
col = c('grey40','orange')
)
biplot(
pc_heart,
choices = c(1,3),
scale = TRUE,
col = c('grey40','orange')
)
biplot(
pc_heart,
choices = c(2,3),
scale = TRUE,
col = c('grey40','orange')
)
par(opar)
write.csv(heart_clean, "Clean_heart_data.csv")
install.packages("tinytex")
# load the swiss data set from R dataset package
data(swiss)
#   for detailed information about other available datasets:
#     library(help = "datasets")
# get the documentation about this dataset with the help command
#   note: all variables are in percentage, i.e. [0,100] range
help(swiss)
# inspect the dataset
str(swiss)
# get a summary report
summary(swiss)
# calculate person correlation coefficient for each pair of variables
cor(swiss)
# generate a histogram for each variable (and show them on the same page)
#   note: titles and x labels are set to the name of the relevant variable
opar <- par(no.readonly = TRUE)
par(mfrow = c(2,3))
hist(swiss[, 1], main = names(swiss)[1], xlab = names(swiss)[1], xlim = c(0,100))
hist(swiss[, 2], main = names(swiss)[2], xlab = names(swiss)[2], xlim = c(0,100))
hist(swiss[, 3], main = names(swiss)[3], xlab = names(swiss)[3], xlim = c(0,100))
hist(swiss[, 4], main = names(swiss)[4], xlab = names(swiss)[4], xlim = c(0,100))
hist(swiss[, 5], main = names(swiss)[5], xlab = names(swiss)[5], xlim = c(0,100))
hist(swiss[, 6], main = names(swiss)[6], xlab = names(swiss)[6], xlim = c(0,100))
par(opar)
# generate a density plot for each variable (and show them on the same page)
#   note: kernel density estimation may have tails outside the variable range!
opar <- par(no.readonly = TRUE)
par(mfrow = c(2,3))
plot(density(swiss[, 1]), main = names(swiss)[1], xlab = names(swiss)[1])
plot(density(swiss[, 2]), main = names(swiss)[2], xlab = names(swiss)[2])
plot(density(swiss[, 3]), main = names(swiss)[3], xlab = names(swiss)[3])
plot(density(swiss[, 4]), main = names(swiss)[4], xlab = names(swiss)[4])
plot(density(swiss[, 5]), main = names(swiss)[5], xlab = names(swiss)[5])
plot(density(swiss[, 6]), main = names(swiss)[6], xlab = names(swiss)[6])
par(opar)
# generate a boxplot graph including horizontal background dashed lines
#   note: this can be done by
#     1. plotting an empty graph, i.e. with white boxes
#     2. adding the background dashed lines
#     3. plotting the coloured boxplot with the option add = T
opar <- par(no.readonly = TRUE)
boxplot(
swiss,
border = 'white',
yaxt = 'n'
)
abline(h = seq(0,100,10), lty = 'dashed', lwd = 2, col = 'darkgrey')
boxplot(
swiss,
border = 'blue',
yaxt = 'n',
add = T
)
axis(2, seq(0,100,10))
par(opar)
# perform PCA on the swiss dataset
#   note: variables are centered and scaled before analysis
pc_swiss <- prcomp(swiss, center = T, scale. = T)
# inspect the attributes of the PCA object returned by prcomp
attributes(pc_swiss)
# see value section of the help for the prcomp for more details
help(prcomp)
# calculate the proportion of exaplained variance (PEV) from the std values
pc_swiss_var <- pc_swiss$sdev^2
pc_swiss_var
pc_swiss_PEV <- pc_swiss_var / sum(pc_swiss_var)
pc_swiss_PEV
# plot the variance per PC
#   note: this can be done using the plot function on the prcomp object
plot(pc_swiss)
# plot the cumulative value of PEV for increasing number of additional PCs
#   note: add an 80% threshold line to inform the feature extraction
#     according to the plot the first 3 PCs should be selected
opar <- par(no.readonly = TRUE)
plot(
cumsum(pc_swiss_PEV),
ylim = c(0,1),
xlab = 'PC',
ylab = 'cumulative PEV',
pch = 20,
col = 'orange'
)
abline(h = 0.8, col = 'red', lty = 'dashed')
par(opar)
# get and inspect the loadings for each PC
#   note: loadings are reported as a rotation matrix (see lecture)
pc_swiss_loadings <- pc_swiss$rotation
pc_swiss_loadings
# plot the loadings for the first three PCs as a barplot
#   note: two vectors for colours and labels are created for convenience
#     for details on the other parameters see the help for barplot and legend
opar <- par(no.readonly = TRUE)
colvector = c('red', 'orange', 'yellow', 'green', 'cyan', 'blue')
labvector = c('PC1', 'PC2', 'PC3')
barplot(
pc_swiss_loadings[,c(1:3)],
beside = T,
yaxt = 'n',
names.arg = labvector,
col = colvector,
ylim = c(-1,1),
border = 'white',
ylab = 'loadings'
)
axis(2, seq(-1,1,0.1))
legend(
'bottomright',
bty = 'n',
col = colvector,
pch = 15,
row.names(pc_swiss_loadings)
)
par(opar)
# generate a biplot for each pair of important PCs (and show them on the same page)
#   note: the option choices is used to select the PCs - default is 1:2
opar <- par(no.readonly = TRUE)
par(mfrow = c(2,2))
biplot(
pc_swiss,
scale = TRUE,
col = c('grey40','orange')
)
biplot(
pc_swiss,
choices = c(1,3),
scale = TRUE,
col = c('grey40','orange')
)
biplot(
pc_swiss,
choices = c(2,3),
scale = TRUE,
col = c('grey40','orange')
)
par(opar)
View(pc_heart)
View(pc_heart_loadings)
# load the swiss data set from R dataset package
data(swiss)
#   for detailed information about other available datasets:
#     library(help = "datasets")
# get the documentation about this dataset with the help command
#   note: all variables are in percentage, i.e. [0,100] range
help(swiss)
# inspect the dataset
str(swiss)
# get a summary report
summary(swiss)
# calculate person correlation coefficient for each pair of variables
cor(swiss)
# load the swiss data set from R dataset package
data(swiss)
#   for detailed information about other available datasets:
#     library(help = "datasets")
# get the documentation about this dataset with the help command
#   note: all variables are in percentage, i.e. [0,100] range
help(swiss)
# inspect the dataset
str(swiss)
# get a summary report
summary(swiss)
# calculate person correlation coefficient for each pair of variables
cor(swiss)
# generate a histogram for each variable (and show them on the same page)
#   note: titles and x labels are set to the name of the relevant variable
opar <- par(no.readonly = TRUE)
par(mfrow = c(2,3))
hist(swiss[, 1], main = names(swiss)[1], xlab = names(swiss)[1], xlim = c(0,100))
hist(swiss[, 2], main = names(swiss)[2], xlab = names(swiss)[2], xlim = c(0,100))
hist(swiss[, 3], main = names(swiss)[3], xlab = names(swiss)[3], xlim = c(0,100))
hist(swiss[, 4], main = names(swiss)[4], xlab = names(swiss)[4], xlim = c(0,100))
hist(swiss[, 5], main = names(swiss)[5], xlab = names(swiss)[5], xlim = c(0,100))
hist(swiss[, 6], main = names(swiss)[6], xlab = names(swiss)[6], xlim = c(0,100))
par(opar)
# generate a density plot for each variable (and show them on the same page)
#   note: kernel density estimation may have tails outside the variable range!
opar <- par(no.readonly = TRUE)
par(mfrow = c(2,3))
plot(density(swiss[, 1]), main = names(swiss)[1], xlab = names(swiss)[1])
plot(density(swiss[, 2]), main = names(swiss)[2], xlab = names(swiss)[2])
plot(density(swiss[, 3]), main = names(swiss)[3], xlab = names(swiss)[3])
plot(density(swiss[, 4]), main = names(swiss)[4], xlab = names(swiss)[4])
plot(density(swiss[, 5]), main = names(swiss)[5], xlab = names(swiss)[5])
plot(density(swiss[, 6]), main = names(swiss)[6], xlab = names(swiss)[6])
par(opar)
# generate a boxplot graph including horizontal background dashed lines
#   note: this can be done by
#     1. plotting an empty graph, i.e. with white boxes
#     2. adding the background dashed lines
#     3. plotting the coloured boxplot with the option add = T
opar <- par(no.readonly = TRUE)
boxplot(
swiss,
border = 'white',
yaxt = 'n'
)
abline(h = seq(0,100,10), lty = 'dashed', lwd = 2, col = 'darkgrey')
boxplot(
swiss,
border = 'blue',
yaxt = 'n',
add = T
)
axis(2, seq(0,100,10))
par(opar)
# generate a histogram for each variable (and show them on the same page)
#   note: titles and x labels are set to the name of the relevant variable
opar <- par(no.readonly = TRUE)
par(mfrow = c(2,3))
hist(swiss[, 1], main = names(swiss)[1], xlab = names(swiss)[1], xlim = c(0,100))
hist(swiss[, 2], main = names(swiss)[2], xlab = names(swiss)[2], xlim = c(0,100))
hist(swiss[, 3], main = names(swiss)[3], xlab = names(swiss)[3], xlim = c(0,100))
hist(swiss[, 4], main = names(swiss)[4], xlab = names(swiss)[4], xlim = c(0,100))
hist(swiss[, 5], main = names(swiss)[5], xlab = names(swiss)[5], xlim = c(0,100))
hist(swiss[, 6], main = names(swiss)[6], xlab = names(swiss)[6], xlim = c(0,100))
par(opar)
# generate a density plot for each variable (and show them on the same page)
#   note: kernel density estimation may have tails outside the variable range!
opar <- par(no.readonly = TRUE)
par(mfrow = c(2,3))
plot(density(swiss[, 1]), main = names(swiss)[1], xlab = names(swiss)[1])
plot(density(swiss[, 2]), main = names(swiss)[2], xlab = names(swiss)[2])
plot(density(swiss[, 3]), main = names(swiss)[3], xlab = names(swiss)[3])
plot(density(swiss[, 4]), main = names(swiss)[4], xlab = names(swiss)[4])
plot(density(swiss[, 5]), main = names(swiss)[5], xlab = names(swiss)[5])
plot(density(swiss[, 6]), main = names(swiss)[6], xlab = names(swiss)[6])
par(opar)
# generate a boxplot graph including horizontal background dashed lines
#   note: this can be done by
#     1. plotting an empty graph, i.e. with white boxes
#     2. adding the background dashed lines
#     3. plotting the coloured boxplot with the option add = T
opar <- par(no.readonly = TRUE)
boxplot(
swiss,
border = 'white',
yaxt = 'n'
)
abline(h = seq(0,100,10), lty = 'dashed', lwd = 2, col = 'darkgrey')
boxplot(
swiss,
border = 'blue',
yaxt = 'n',
add = T
)
axis(2, seq(0,100,10))
par(opar)
# perform PCA on the swiss dataset
#   note: variables are centered and scaled before analysis
pc_swiss <- prcomp(swiss, center = T, scale. = T)
# inspect the attributes of the PCA object returned by prcomp
attributes(pc_swiss)
# see value section of the help for the prcomp for more details
help(prcomp)
# calculate the proportion of exaplained variance (PEV) from the std values
pc_swiss_var <- pc_swiss$sdev^2
pc_swiss_var
pc_swiss_PEV <- pc_swiss_var / sum(pc_swiss_var)
pc_swiss_PEV
# plot the variance per PC
#   note: this can be done using the plot function on the prcomp object
plot(pc_swiss)
# plot the cumulative value of PEV for increasing number of additional PCs
#   note: add an 80% threshold line to inform the feature extraction
#     according to the plot the first 3 PCs should be selected
opar <- par(no.readonly = TRUE)
plot(
cumsum(pc_swiss_PEV),
ylim = c(0,1),
xlab = 'PC',
ylab = 'cumulative PEV',
pch = 20,
col = 'orange'
)
abline(h = 0.8, col = 'red', lty = 'dashed')
par(opar)
# get and inspect the loadings for each PC
#   note: loadings are reported as a rotation matrix (see lecture)
pc_swiss_loadings <- pc_swiss$rotation
pc_swiss_loadings
# plot the loadings for the first three PCs as a barplot
#   note: two vectors for colours and labels are created for convenience
#     for details on the other parameters see the help for barplot and legend
opar <- par(no.readonly = TRUE)
colvector = c('red', 'orange', 'yellow', 'green', 'cyan', 'blue')
labvector = c('PC1', 'PC2', 'PC3')
barplot(
pc_swiss_loadings[,c(1:3)],
beside = T,
yaxt = 'n',
names.arg = labvector,
col = colvector,
ylim = c(-1,1),
border = 'white',
ylab = 'loadings'
)
axis(2, seq(-1,1,0.1))
legend(
'bottomright',
bty = 'n',
col = colvector,
pch = 15,
row.names(pc_swiss_loadings)
)
par(opar)
# generate a biplot for each pair of important PCs (and show them on the same page)
#   note: the option choices is used to select the PCs - default is 1:2
opar <- par(no.readonly = TRUE)
par(mfrow = c(2,2))
biplot(
pc_swiss,
scale = TRUE,
col = c('grey40','orange')
)
biplot(
pc_swiss,
choices = c(1,3),
scale = TRUE,
col = c('grey40','orange')
)
biplot(
pc_swiss,
choices = c(2,3),
scale = TRUE,
col = c('grey40','orange')
)
par(opar)
